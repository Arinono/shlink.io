{% extends 'layout.html.twig' %}

{% block content %}
    <!-- Header -->
    {% include 'partials/small-header.html.twig' %}

    <section id="three" class="wrapper style2 special">
        <header class="major">
            <h2>Installation</h2>
        </header>
    </section>
    <section id="one" class="wrapper">
        <div class="inner alt">
            <section class="spotlight text-only">
                <div class="content">
                    <p>Shlink is a web application built with PHP. It shouldn't be hard to install, but you have to follow these steps.</p>
                    <header>
                        <h4>Requirements</h4>
                    </header>
                    <ul>
                        <li>PHP 5.6 or greater with JSON, APC, intl, curl and PDO extensions.</li>
                        <li>MySQL (other database systems will be supported in the future).</li>
                        <li>The web server of your choice with PHP integration (Apache or Nginx recommended).</li>
                    </ul>
                </div>
            </section>
            <section class="spotlight text-only">
                <div class="content">
                    <header>
                        <h4>Installation steps</h4>
                    </header>
                    <ul>
                        <li>
                            <a href="https://getcomposer.org/download/" target="_blank">Download composer</a> and run this command.<br>
                            <code>php composer.phar create-project shlinkio/shlink</code><br>
                            Move the resulting <b>shlink</b> folder to the destination of your choice.
                        </li>
                        <li>
                            Define these environment vars, both for the web server and for the command line:
                            <ul style="list-style-type: none; margin: 10px 0;">
                                <li><b>SHORTENED_URL_SCHEMA</b>: http|https (defaults to http).</li>
                                <li><b>SHORTENED_URL_HOSTNAME</b>: The short domain to use in generated short URLs.</li>
                                <li><b>SHORTCODE_CHARS</b>: The char set used to generate short codes (defaults to <b>123456789bcdfghjkmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ</b>, but a new one can be generated with the <code>config:generate-charset</code> command)</li>
                                <li><b>SECRET_KEY</b>: The key used to encrypt the JOSN web tokens used for authentication in the REST API. It can be generated by running the <code>config:generate-secret</code> command.</li>
                                <li><b>DB_USER</b>: The MySQL database username.</li>
                                <li><b>DB_PASSWORD</b>: The MySQL database password.</li>
                                <li><b>DB_NAME</b>: MySQL database name (defaults to <b>shlink</b>).</li>
                                <li><b>DEFAULT_LOCALE</b>: Language in which web requests (browser and REST) will be returned if no <code>Accept-Language</code> header is sent (defaults to <b>en</b>).</li>
                                <li><b>CLI_LOCALE</b>: Language in which console command messages will be displayed (defaults to <b>en</b>).</li>
                            </ul>
                        </li>
                        <li>
                            Create the MySQL database. Initialize an empty database and run this:<br>
                            <code>vendor/bin/doctrine orm:schema-tool:create</code>
                        </li>
                        <li>Add write permissions to the <code>data</code> directory.</li>
                        <li>
                            Create doctrine proxies by running this:<br>
                            <code>vendor/bin/doctrine orm:generate-proxies</code>
                        </li>
                        <li>
                            Optionally, you can create a symlink to the bin/cli script in a folder which is in your path.<br>
                            For example /usr/local/bin for linux systems. This will allow you to easily run shlink from the command line.
                        </li>
                    </ul>
                    <p>In the future, an automated installation and update process will be provided, so that this process doesn't need to be done manually.</p>
                </div>
            </section>
            <section class="spotlight text-only">
                <div class="content">
                    <header>
                        <h4>Visitors locations</h4>
                    </header>
                    <p>Resolving the IP of a visitor in order to get its location involves performing a request to an external service, which gets time. For this reason, this task is not done in real time.</p>
                    <p>You can manually run the command <code>visit:process</code> which will process all the IPs from visits.</p>
                    <p>Alternatively, you could create an scheduled task which automatically runs that command so that the information is updated periodically.</p>
                    <p>This is an example cron job that could be created under a Unix system. It will run the command every hour, processing all pending IP addresses:</p>
                    <p><code>0 * * * * /path/to/shlink/bin/cli visit:process</code></p>
                </div>
            </section>
            <section class="spotlight text-only">
                <div class="content">
                    <header>
                        <h4>Virtual hosts</h4>
                        <p>These are samples for the most used web servers. Use them to get shlink up and running.</p>
                    </header>
                    <b>Nginx</b>
                    <pre>
                        <code>server {
    server_name doma.in;
    listen 80;
    root /path/to/shlink/public;
    index index.php;
    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~ \.php$ {
        fastcgi_param SHORTENED_URL_HOSTNAME "doma.in";
        fastcgi_param SHORTCODE_CHARS "123456789bcdfghjkmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ";
        fastcgi_param SECRET_KEY "J54SIwlO2pbIJNNZ4Y6Bwuc9zJvHk0f3";
        fastcgi_param DB_USER "root";
        fastcgi_param DB_PASSWORD "root";

        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        fastcgi_index index.php;
        include fastcgi.conf;
    }
}</code>
                    </pre>
                    <b>Apache</b>
                    <pre>
                        <code>&lt;VirtualHost *:80&gt;
    ServerName doma.in
    DocumentRoot &quot;/path/to/shlink/public&quot;

    SetEnv SHORTENED_URL_HOSTNAME doma.in
    SetEnv SHORTCODE_CHARS 123456789bcdfghjkmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ
    SetEnv SECRET_KEY J54SIwlO2pbIJNNZ4Y6Bwuc9zJvHk0f3
    SetEnv DB_USER root
    SetEnv DB_PASSWORD root

    &lt;Directory &quot;/path/to/shlink/public&quot;&gt;
        Options FollowSymLinks Includes ExecCGI
        AllowOverride all
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</code>
                    </pre>
                </div>
            </section>
        </div>
    </section>
{% endblock %}
